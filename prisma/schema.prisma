// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  password              String
  name                  String?
  role                  UserRole @default(USER)
  resetToken            String?
  resetTokenExpiry      DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  galleries             Gallery[]
  comics                Comic[]

  @@map("users")
}

model Gallery {
  id                    Int      @id @default(autoincrement())
  title                 String
  thumbnail             String   // 封面图片URL或路径
  imageUrls             String[] // 所有图片URL数组
  color                 String   // 渐变色配置
  price                 String
  likesCount            Int      @default(0)
  description           String?
  tags                  String[] // 标签数组
  isPublic              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("galleries")
}

model Comic {
  id                    String   @id @default(cuid())
  title                 String
  thumbnail             String   // 封面图片URL或路径
  imageUrls             String[] // 所有图片URL数组
  color                 String   // 渐变色配置
  price                 String
  likesCount            Int      @default(0)
  episode               Int?     // 第几话
  description           String?
  tags                  String[] // 标签数组
  isPublic              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comics")
}
